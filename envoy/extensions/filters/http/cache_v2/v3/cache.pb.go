// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v5.29.3
// source: envoy/extensions/filters/http/cache_v2/v3/cache.proto

package cache_v2v3

import (
	_ "github.com/cncf/xds/go/udpa/annotations"
	_ "github.com/cncf/xds/go/xds/annotations/v3"
	v31 "github.com/envoyproxy/go-control-plane/envoy/config/route/v3"
	v3 "github.com/envoyproxy/go-control-plane/envoy/type/matcher/v3"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// [#extension: envoy.filters.http.cache_v2]
// [#next-free-field: 8]
type CacheV2Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Config specific to the cache storage implementation. Required unless “disabled“
	// is true.
	// [#extension-category: envoy.http.cache_v2]
	TypedConfig *anypb.Any `protobuf:"bytes,1,opt,name=typed_config,json=typedConfig,proto3" json:"typed_config,omitempty"`
	// When true, the cache filter is a no-op filter.
	//
	// Possible use-cases for this include:
	// - Turning a filter on and off with :ref:`ECDS <envoy_v3_api_file_envoy/service/extension/v3/config_discovery.proto>`.
	// [#comment: once route-specific overrides are implemented, they are the more likely use-case.]
	Disabled *wrapperspb.BoolValue `protobuf:"bytes,5,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// [#not-implemented-hide:]
	// List of matching rules that defines allowed “Vary“ headers.
	//
	// The “vary“ response header holds a list of header names that affect the
	// contents of a response, as described by
	// https://httpwg.org/specs/rfc7234.html#caching.negotiated.responses.
	//
	// During insertion, “allowed_vary_headers“ acts as a allowlist: if a
	// response's “vary“ header mentions any header names that aren't matched by any rules in
	// “allowed_vary_headers“, that response will not be cached.
	//
	// During lookup, “allowed_vary_headers“ controls what request headers will be
	// sent to the cache storage implementation.
	AllowedVaryHeaders []*v3.StringMatcher `protobuf:"bytes,2,rep,name=allowed_vary_headers,json=allowedVaryHeaders,proto3" json:"allowed_vary_headers,omitempty"`
	// [#not-implemented-hide:]
	// <TODO(toddmgreer) implement key customization>
	//
	// Modifies cache key creation by restricting which parts of the URL are included.
	KeyCreatorParams *CacheV2Config_KeyCreatorParams `protobuf:"bytes,3,opt,name=key_creator_params,json=keyCreatorParams,proto3" json:"key_creator_params,omitempty"`
	// [#not-implemented-hide:]
	// <TODO(toddmgreer) implement size limit>
	//
	// Max body size the cache filter will insert into a cache. 0 means unlimited (though the cache
	// storage implementation may have its own limit beyond which it will reject insertions).
	MaxBodyBytes uint32 `protobuf:"varint,4,opt,name=max_body_bytes,json=maxBodyBytes,proto3" json:"max_body_bytes,omitempty"`
	// By default, a “cache-control: no-cache“ or “pragma: no-cache“ header in the request
	// causes the cache to validate with its upstream even if the lookup is a hit. Setting this
	// to true will ignore these headers.
	IgnoreRequestCacheControlHeader bool `protobuf:"varint,6,opt,name=ignore_request_cache_control_header,json=ignoreRequestCacheControlHeader,proto3" json:"ignore_request_cache_control_header,omitempty"`
	// If this is set, requests sent upstream to populate the cache will go to the
	// specified cluster rather than the cluster selected by the vhost and route.
	//
	// If you have actions to be taken by the router filter - either
	// “upstream_http_filters“ or one of the “RouteConfiguration“ actions such as
	// “response_headers_to_add“ - then the cache's side-channel going directly to the
	// routed cluster will bypass these actions. You can set “override_upstream_cluster“
	// to an internal listener which duplicates the relevant “RouteConfiguration“, to
	// replicate the desired behavior on the side-channel upstream request issued by the
	// cache.
	//
	// This is a workaround for implementation constraints which it is hoped will at some
	// point become unnecessary, then unsupported and this field will be removed.
	OverrideUpstreamCluster string `protobuf:"bytes,7,opt,name=override_upstream_cluster,json=overrideUpstreamCluster,proto3" json:"override_upstream_cluster,omitempty"`
}

func (x *CacheV2Config) Reset() {
	*x = CacheV2Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_filters_http_cache_v2_v3_cache_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CacheV2Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheV2Config) ProtoMessage() {}

func (x *CacheV2Config) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_http_cache_v2_v3_cache_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheV2Config.ProtoReflect.Descriptor instead.
func (*CacheV2Config) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_http_cache_v2_v3_cache_proto_rawDescGZIP(), []int{0}
}

func (x *CacheV2Config) GetTypedConfig() *anypb.Any {
	if x != nil {
		return x.TypedConfig
	}
	return nil
}

func (x *CacheV2Config) GetDisabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.Disabled
	}
	return nil
}

func (x *CacheV2Config) GetAllowedVaryHeaders() []*v3.StringMatcher {
	if x != nil {
		return x.AllowedVaryHeaders
	}
	return nil
}

func (x *CacheV2Config) GetKeyCreatorParams() *CacheV2Config_KeyCreatorParams {
	if x != nil {
		return x.KeyCreatorParams
	}
	return nil
}

func (x *CacheV2Config) GetMaxBodyBytes() uint32 {
	if x != nil {
		return x.MaxBodyBytes
	}
	return 0
}

func (x *CacheV2Config) GetIgnoreRequestCacheControlHeader() bool {
	if x != nil {
		return x.IgnoreRequestCacheControlHeader
	}
	return false
}

func (x *CacheV2Config) GetOverrideUpstreamCluster() string {
	if x != nil {
		return x.OverrideUpstreamCluster
	}
	return ""
}

// [#not-implemented-hide:]
// Modifies cache key creation by restricting which parts of the URL are included.
type CacheV2Config_KeyCreatorParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If true, exclude the URL scheme from the cache key. Set to true if your origins always
	// produce the same response for http and https requests.
	ExcludeScheme bool `protobuf:"varint,1,opt,name=exclude_scheme,json=excludeScheme,proto3" json:"exclude_scheme,omitempty"`
	// If true, exclude the host from the cache key. Set to true if your origins' responses don't
	// ever depend on host.
	ExcludeHost bool `protobuf:"varint,2,opt,name=exclude_host,json=excludeHost,proto3" json:"exclude_host,omitempty"`
	// If “query_parameters_included“ is nonempty, only query parameters matched
	// by one or more of its matchers are included in the cache key. Any other
	// query params will not affect cache lookup.
	QueryParametersIncluded []*v31.QueryParameterMatcher `protobuf:"bytes,3,rep,name=query_parameters_included,json=queryParametersIncluded,proto3" json:"query_parameters_included,omitempty"`
	// If “query_parameters_excluded“ is nonempty, query parameters matched by one
	// or more of its matchers are excluded from the cache key (even if also
	// matched by “query_parameters_included“), and will not affect cache lookup.
	QueryParametersExcluded []*v31.QueryParameterMatcher `protobuf:"bytes,4,rep,name=query_parameters_excluded,json=queryParametersExcluded,proto3" json:"query_parameters_excluded,omitempty"`
}

func (x *CacheV2Config_KeyCreatorParams) Reset() {
	*x = CacheV2Config_KeyCreatorParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_filters_http_cache_v2_v3_cache_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CacheV2Config_KeyCreatorParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheV2Config_KeyCreatorParams) ProtoMessage() {}

func (x *CacheV2Config_KeyCreatorParams) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_http_cache_v2_v3_cache_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheV2Config_KeyCreatorParams.ProtoReflect.Descriptor instead.
func (*CacheV2Config_KeyCreatorParams) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_http_cache_v2_v3_cache_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CacheV2Config_KeyCreatorParams) GetExcludeScheme() bool {
	if x != nil {
		return x.ExcludeScheme
	}
	return false
}

func (x *CacheV2Config_KeyCreatorParams) GetExcludeHost() bool {
	if x != nil {
		return x.ExcludeHost
	}
	return false
}

func (x *CacheV2Config_KeyCreatorParams) GetQueryParametersIncluded() []*v31.QueryParameterMatcher {
	if x != nil {
		return x.QueryParametersIncluded
	}
	return nil
}

func (x *CacheV2Config_KeyCreatorParams) GetQueryParametersExcluded() []*v31.QueryParameterMatcher {
	if x != nil {
		return x.QueryParametersExcluded
	}
	return nil
}

var File_envoy_extensions_filters_http_cache_v2_v3_cache_proto protoreflect.FileDescriptor

var file_envoy_extensions_filters_http_cache_v2_v3_cache_proto_rawDesc = []byte{
	0x0a, 0x35, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2f,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x76, 0x32, 0x2f, 0x76, 0x33, 0x2f, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x29, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x76, 0x32, 0x2e,
	0x76, 0x33, 0x1a, 0x2c, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x76, 0x33, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x22, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x2f, 0x76, 0x33, 0x2f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x78, 0x64, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x76, 0x33, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1d, 0x75, 0x64, 0x70, 0x61, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xb4, 0x06, 0x0a, 0x0d, 0x43, 0x61, 0x63, 0x68, 0x65, 0x56, 0x32, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x37, 0x0a, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0b, 0x74,
	0x79, 0x70, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x36, 0x0a, 0x08, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x56, 0x0a, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x76, 0x61,
	0x72, 0x79, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x56,
	0x61, 0x72, 0x79, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x77, 0x0a, 0x12, 0x6b, 0x65,
	0x79, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x76, 0x32, 0x2e,
	0x76, 0x33, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x56, 0x32, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4b, 0x65, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x52, 0x10, 0x6b, 0x65, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x78,
	0x42, 0x6f, 0x64, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x23, 0x69, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x19, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x5f, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x6f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x1a, 0xb0, 0x02, 0x0a, 0x10, 0x4b, 0x65, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x48, 0x6f,
	0x73, 0x74, 0x12, 0x68, 0x0a, 0x19, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x52, 0x17, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x12, 0x68, 0x0a, 0x19,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x17, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x42, 0xb4, 0x01, 0xba, 0x80, 0xc8, 0xd1, 0x06, 0x02, 0x10,
	0x02, 0xd2, 0xc6, 0xa4, 0xe1, 0x06, 0x02, 0x08, 0x01, 0x0a, 0x37, 0x69, 0x6f, 0x2e, 0x65, 0x6e,
	0x76, 0x6f, 0x79, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x76, 0x32, 0x2e,
	0x76, 0x33, 0x42, 0x0a, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x5b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6e, 0x76,
	0x6f, 0x79, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x67, 0x6f, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x76, 0x32, 0x2f,
	0x76, 0x33, 0x3b, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x76, 0x32, 0x76, 0x33, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_envoy_extensions_filters_http_cache_v2_v3_cache_proto_rawDescOnce sync.Once
	file_envoy_extensions_filters_http_cache_v2_v3_cache_proto_rawDescData = file_envoy_extensions_filters_http_cache_v2_v3_cache_proto_rawDesc
)

func file_envoy_extensions_filters_http_cache_v2_v3_cache_proto_rawDescGZIP() []byte {
	file_envoy_extensions_filters_http_cache_v2_v3_cache_proto_rawDescOnce.Do(func() {
		file_envoy_extensions_filters_http_cache_v2_v3_cache_proto_rawDescData = protoimpl.X.CompressGZIP(file_envoy_extensions_filters_http_cache_v2_v3_cache_proto_rawDescData)
	})
	return file_envoy_extensions_filters_http_cache_v2_v3_cache_proto_rawDescData
}

var file_envoy_extensions_filters_http_cache_v2_v3_cache_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_envoy_extensions_filters_http_cache_v2_v3_cache_proto_goTypes = []interface{}{
	(*CacheV2Config)(nil),                  // 0: envoy.extensions.filters.http.cache_v2.v3.CacheV2Config
	(*CacheV2Config_KeyCreatorParams)(nil), // 1: envoy.extensions.filters.http.cache_v2.v3.CacheV2Config.KeyCreatorParams
	(*anypb.Any)(nil),                      // 2: google.protobuf.Any
	(*wrapperspb.BoolValue)(nil),           // 3: google.protobuf.BoolValue
	(*v3.StringMatcher)(nil),               // 4: envoy.type.matcher.v3.StringMatcher
	(*v31.QueryParameterMatcher)(nil),      // 5: envoy.config.route.v3.QueryParameterMatcher
}
var file_envoy_extensions_filters_http_cache_v2_v3_cache_proto_depIdxs = []int32{
	2, // 0: envoy.extensions.filters.http.cache_v2.v3.CacheV2Config.typed_config:type_name -> google.protobuf.Any
	3, // 1: envoy.extensions.filters.http.cache_v2.v3.CacheV2Config.disabled:type_name -> google.protobuf.BoolValue
	4, // 2: envoy.extensions.filters.http.cache_v2.v3.CacheV2Config.allowed_vary_headers:type_name -> envoy.type.matcher.v3.StringMatcher
	1, // 3: envoy.extensions.filters.http.cache_v2.v3.CacheV2Config.key_creator_params:type_name -> envoy.extensions.filters.http.cache_v2.v3.CacheV2Config.KeyCreatorParams
	5, // 4: envoy.extensions.filters.http.cache_v2.v3.CacheV2Config.KeyCreatorParams.query_parameters_included:type_name -> envoy.config.route.v3.QueryParameterMatcher
	5, // 5: envoy.extensions.filters.http.cache_v2.v3.CacheV2Config.KeyCreatorParams.query_parameters_excluded:type_name -> envoy.config.route.v3.QueryParameterMatcher
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_envoy_extensions_filters_http_cache_v2_v3_cache_proto_init() }
func file_envoy_extensions_filters_http_cache_v2_v3_cache_proto_init() {
	if File_envoy_extensions_filters_http_cache_v2_v3_cache_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_envoy_extensions_filters_http_cache_v2_v3_cache_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CacheV2Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_extensions_filters_http_cache_v2_v3_cache_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CacheV2Config_KeyCreatorParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_envoy_extensions_filters_http_cache_v2_v3_cache_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_envoy_extensions_filters_http_cache_v2_v3_cache_proto_goTypes,
		DependencyIndexes: file_envoy_extensions_filters_http_cache_v2_v3_cache_proto_depIdxs,
		MessageInfos:      file_envoy_extensions_filters_http_cache_v2_v3_cache_proto_msgTypes,
	}.Build()
	File_envoy_extensions_filters_http_cache_v2_v3_cache_proto = out.File
	file_envoy_extensions_filters_http_cache_v2_v3_cache_proto_rawDesc = nil
	file_envoy_extensions_filters_http_cache_v2_v3_cache_proto_goTypes = nil
	file_envoy_extensions_filters_http_cache_v2_v3_cache_proto_depIdxs = nil
}
