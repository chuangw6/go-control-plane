// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v5.29.3
// source: envoy/config/core/v3/cel.proto

package corev3

import (
	_ "github.com/cncf/xds/go/udpa/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CEL expression evaluation configuration.
// These options control the behavior of the Common Expression Language runtime for
// individual CEL expressions.
type CelExpressionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enable string conversion functions for CEL expressions. When enabled, CEL expressions
	// can convert values to strings using the “string()“ function.
	//
	// .. attention::
	//
	//	This option is disabled by default to avoid unbounded memory allocation.
	//	CEL evaluation cost is typically bounded by the expression size, but converting
	//	arbitrary values (e.g., large messages, lists, or maps) to strings may allocate
	//	memory proportional to input data size, which can be unbounded and lead to
	//	memory exhaustion.
	EnableStringConversion bool `protobuf:"varint,1,opt,name=enable_string_conversion,json=enableStringConversion,proto3" json:"enable_string_conversion,omitempty"`
	// Enable string concatenation for CEL expressions. When enabled, CEL expressions
	// can concatenate strings using the “+“ operator.
	//
	// .. attention::
	//
	//	This option is disabled by default to avoid unbounded memory allocation.
	//	While CEL normally bounds evaluation by expression size, enabling string
	//	concatenation allows building outputs whose size depends on input data,
	//	potentially causing large intermediate allocations and memory exhaustion.
	EnableStringConcat bool `protobuf:"varint,2,opt,name=enable_string_concat,json=enableStringConcat,proto3" json:"enable_string_concat,omitempty"`
	// Enable string manipulation functions for CEL expressions. When enabled, CEL
	// expressions can use additional string functions:
	//
	// * “replace(old, new)“ - Replaces all occurrences of “old“ with “new“.
	// * “split(separator)“ - Splits a string into a list of substrings.
	// * “lowerAscii()“ - Converts ASCII characters to lowercase.
	// * “upperAscii()“ - Converts ASCII characters to uppercase.
	//
	// .. note::
	//
	//	Standard CEL string functions like ``contains()``, ``startsWith()``, and
	//	``endsWith()`` are always available regardless of this setting.
	//
	// .. attention::
	//
	//	This option is disabled by default to avoid unbounded memory allocation.
	//	Although CEL generally bounds evaluation by expression size, functions such as
	//	``replace``, ``split``, ``lowerAscii()``, and ``upperAscii()`` can allocate memory
	//	proportional to input data size. Under adversarial inputs this can lead to
	//	unbounded allocations and memory exhaustion.
	EnableStringFunctions bool `protobuf:"varint,3,opt,name=enable_string_functions,json=enableStringFunctions,proto3" json:"enable_string_functions,omitempty"`
}

func (x *CelExpressionConfig) Reset() {
	*x = CelExpressionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_config_core_v3_cel_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CelExpressionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CelExpressionConfig) ProtoMessage() {}

func (x *CelExpressionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_config_core_v3_cel_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CelExpressionConfig.ProtoReflect.Descriptor instead.
func (*CelExpressionConfig) Descriptor() ([]byte, []int) {
	return file_envoy_config_core_v3_cel_proto_rawDescGZIP(), []int{0}
}

func (x *CelExpressionConfig) GetEnableStringConversion() bool {
	if x != nil {
		return x.EnableStringConversion
	}
	return false
}

func (x *CelExpressionConfig) GetEnableStringConcat() bool {
	if x != nil {
		return x.EnableStringConcat
	}
	return false
}

func (x *CelExpressionConfig) GetEnableStringFunctions() bool {
	if x != nil {
		return x.EnableStringFunctions
	}
	return false
}

var File_envoy_config_core_v3_cel_proto protoreflect.FileDescriptor

var file_envoy_config_core_v3_cel_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63,
	0x6f, 0x72, 0x65, 0x2f, 0x76, 0x33, 0x2f, 0x63, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x14, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x33, 0x1a, 0x1d, 0x75, 0x64, 0x70, 0x61, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb9, 0x01, 0x0a, 0x13, 0x43, 0x65, 0x6c, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x38, 0x0a,
	0x18, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x16, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x7c, 0xba, 0x80, 0xc8, 0xd1, 0x06, 0x02, 0x10, 0x02, 0x0a, 0x22, 0x69, 0x6f, 0x2e,
	0x65, 0x6e, 0x76, 0x6f, 0x79, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x33, 0x42,
	0x08, 0x43, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x42, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2f, 0x67, 0x6f, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2d, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2f, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x33, 0x3b, 0x63, 0x6f, 0x72, 0x65, 0x76, 0x33, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_envoy_config_core_v3_cel_proto_rawDescOnce sync.Once
	file_envoy_config_core_v3_cel_proto_rawDescData = file_envoy_config_core_v3_cel_proto_rawDesc
)

func file_envoy_config_core_v3_cel_proto_rawDescGZIP() []byte {
	file_envoy_config_core_v3_cel_proto_rawDescOnce.Do(func() {
		file_envoy_config_core_v3_cel_proto_rawDescData = protoimpl.X.CompressGZIP(file_envoy_config_core_v3_cel_proto_rawDescData)
	})
	return file_envoy_config_core_v3_cel_proto_rawDescData
}

var file_envoy_config_core_v3_cel_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_envoy_config_core_v3_cel_proto_goTypes = []interface{}{
	(*CelExpressionConfig)(nil), // 0: envoy.config.core.v3.CelExpressionConfig
}
var file_envoy_config_core_v3_cel_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_envoy_config_core_v3_cel_proto_init() }
func file_envoy_config_core_v3_cel_proto_init() {
	if File_envoy_config_core_v3_cel_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_envoy_config_core_v3_cel_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CelExpressionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_envoy_config_core_v3_cel_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_envoy_config_core_v3_cel_proto_goTypes,
		DependencyIndexes: file_envoy_config_core_v3_cel_proto_depIdxs,
		MessageInfos:      file_envoy_config_core_v3_cel_proto_msgTypes,
	}.Build()
	File_envoy_config_core_v3_cel_proto = out.File
	file_envoy_config_core_v3_cel_proto_rawDesc = nil
	file_envoy_config_core_v3_cel_proto_goTypes = nil
	file_envoy_config_core_v3_cel_proto_depIdxs = nil
}
