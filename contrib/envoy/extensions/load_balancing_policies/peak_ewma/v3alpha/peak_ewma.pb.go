// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v5.29.3
// source: contrib/envoy/extensions/load_balancing_policies/peak_ewma/v3alpha/peak_ewma.proto

package v3alpha

import (
	_ "github.com/cncf/xds/go/udpa/annotations"
	_ "github.com/cncf/xds/go/xds/annotations/v3"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// [#protodoc-title: Peak EWMA Load Balancer Configuration]
// Configuration for the Peak EWMA (Exponentially Weighted Moving Average) load balancing policy.
//
// This policy implements a latency-aware variant of the Power of Two Choices (P2C) algorithm.
// It selects the best host from two randomly chosen candidates based on a cost function:
// `Cost = RTT_peak_ewma * (active_requests + 1)`.
//
// The Peak EWMA algorithm is designed to:
// - Automatically route traffic away from slow or overloaded hosts
// - Adapt to changing host performance without manual configuration
// - Provide low-latency request routing with O(1) host selection complexity
// - Work effectively in heterogeneous environments with varying host capabilities
//
// RTT measurements are automatically collected from HTTP request timing and used to update
// the EWMA for each host. This provides real-time performance feedback for routing decisions.
//
// Important: This load balancer only considers latency and load when selecting hosts. It does
// not handle host health or error responses - these should be managed by Envoy's health checking
// and outlier detection systems. Peak EWMA operates on the pool of healthy hosts as determined
// by these other systems.
//
// [#extension: envoy.load_balancing_policies.peak_ewma]
// [#next-free-field: 6]
type PeakEwma struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The decay time for the RTT EWMA calculation. This specifies the time window over which
	// latency observations are considered relevant. After this duration, older measurements
	// have exponentially decayed to half their original weight.
	//
	// The Peak EWMA algorithm uses this to calculate the EWMA time constant (tau):
	// `tau = decay_time_nanos`, and the EWMA reaches its half-life after `tau * ln(2)`.
	//
	// This parameter is more intuitive than a raw smoothing factor as it directly relates
	// to the time duration over which you want to observe latency trends.
	//
	// If not specified, defaults to 10 seconds (following Finagle's default).
	DecayTime *durationpb.Duration `protobuf:"bytes,1,opt,name=decay_time,json=decayTime,proto3" json:"decay_time,omitempty"`
	// The interval at which EWMA data is aggregated from worker threads to the main thread.
	// This controls the frequency of cross-thread synchronization for the per-thread aggregation model.
	//
	// A shorter interval provides more up-to-date cross-worker information but increases
	// synchronization overhead. A longer interval reduces overhead but may cause workers
	// to operate with staler information about other workers' latency observations.
	//
	// If not specified, defaults to 100 milliseconds.
	AggregationInterval *durationpb.Duration `protobuf:"bytes,2,opt,name=aggregation_interval,json=aggregationInterval,proto3" json:"aggregation_interval,omitempty"`
	// Maximum RTT samples to buffer per host per worker thread before overwriting oldest samples.
	// This bounds memory usage while allowing burst traffic handling.
	//
	// Buffer capacity formula: max_samples_per_host / aggregation_interval = RPS capacity per host per worker
	// Memory formula: max_samples_per_host × num_hosts × num_workers × 16 bytes
	// Memory usage per worker = max_samples_per_host × num_hosts × 16 bytes
	//
	// If not specified, defaults to 1,000 samples per host per worker.
	MaxSamplesPerHost *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=max_samples_per_host,json=maxSamplesPerHost,proto3" json:"max_samples_per_host,omitempty"`
	// Default RTT value to use for hosts that don't have measured RTT yet.
	// This provides a baseline for cost calculations until actual measurements are available.
	//
	// This value is critical for initial load balancing decisions when hosts first join
	// the cluster or when RTT measurements are temporarily unavailable. It should reflect
	// the expected baseline latency for your environment:
	//
	// If not specified, defaults to 10 milliseconds.
	DefaultRtt *durationpb.Duration `protobuf:"bytes,4,opt,name=default_rtt,json=defaultRtt,proto3" json:"default_rtt,omitempty"`
	// Penalty cost assigned to hosts that cannot provide valid cost calculations.
	// This is used when a host has no RTT measurements or is unhealthy, ensuring
	// the Power of Two Choices algorithm will prefer hosts with known performance.
	//
	// You probably should not change this value.
	//
	// The penalty should be significantly higher than any realistic RTT-based cost
	// to ensure hosts with unknown performance are strongly deprioritized while
	// still allowing them to receive traffic if no better alternatives exist.
	//
	// If not specified, defaults to 1,000,000.0 (1 million).
	PenaltyValue *wrapperspb.DoubleValue `protobuf:"bytes,5,opt,name=penalty_value,json=penaltyValue,proto3" json:"penalty_value,omitempty"`
}

func (x *PeakEwma) Reset() {
	*x = PeakEwma{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_envoy_extensions_load_balancing_policies_peak_ewma_v3alpha_peak_ewma_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeakEwma) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeakEwma) ProtoMessage() {}

func (x *PeakEwma) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_envoy_extensions_load_balancing_policies_peak_ewma_v3alpha_peak_ewma_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeakEwma.ProtoReflect.Descriptor instead.
func (*PeakEwma) Descriptor() ([]byte, []int) {
	return file_contrib_envoy_extensions_load_balancing_policies_peak_ewma_v3alpha_peak_ewma_proto_rawDescGZIP(), []int{0}
}

func (x *PeakEwma) GetDecayTime() *durationpb.Duration {
	if x != nil {
		return x.DecayTime
	}
	return nil
}

func (x *PeakEwma) GetAggregationInterval() *durationpb.Duration {
	if x != nil {
		return x.AggregationInterval
	}
	return nil
}

func (x *PeakEwma) GetMaxSamplesPerHost() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MaxSamplesPerHost
	}
	return nil
}

func (x *PeakEwma) GetDefaultRtt() *durationpb.Duration {
	if x != nil {
		return x.DefaultRtt
	}
	return nil
}

func (x *PeakEwma) GetPenaltyValue() *wrapperspb.DoubleValue {
	if x != nil {
		return x.PenaltyValue
	}
	return nil
}

var File_contrib_envoy_extensions_load_balancing_policies_peak_ewma_v3alpha_peak_ewma_proto protoreflect.FileDescriptor

var file_contrib_envoy_extensions_load_balancing_policies_peak_ewma_v3alpha_peak_ewma_proto_rawDesc = []byte{
	0x0a, 0x52, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x2f, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x2f, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x65, 0x77, 0x6d, 0x61, 0x2f, 0x76, 0x33, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x65, 0x77, 0x6d, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x3a, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x70,
	0x65, 0x61, 0x6b, 0x5f, 0x65, 0x77, 0x6d, 0x61, 0x2e, 0x76, 0x33, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x78, 0x64, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x76, 0x33, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1d, 0x75, 0x64, 0x70, 0x61, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xea, 0x02, 0x0a, 0x08, 0x50, 0x65, 0x61, 0x6b, 0x45, 0x77, 0x6d, 0x61, 0x12, 0x38, 0x0a,
	0x0a, 0x64, 0x65, 0x63, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x65,
	0x63, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x14, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x13, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x4d, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x50, 0x65, 0x72,
	0x48, 0x6f, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x72, 0x74, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x74, 0x74,
	0x12, 0x41, 0x0a, 0x0d, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x08, 0xd2, 0xc6, 0xa4, 0xe1, 0x06, 0x02, 0x08, 0x01, 0x42, 0xd6, 0x01,
	0xba, 0x80, 0xc8, 0xd1, 0x06, 0x02, 0x10, 0x02, 0xd2, 0xc6, 0xa4, 0xe1, 0x06, 0x02, 0x08, 0x01,
	0x0a, 0x48, 0x69, 0x6f, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e,
	0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x65, 0x77,
	0x6d, 0x61, 0x2e, 0x76, 0x33, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x42, 0x0d, 0x50, 0x65, 0x61, 0x6b,
	0x45, 0x77, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x69, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2f, 0x67, 0x6f, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2d, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x2f, 0x65, 0x6e, 0x76, 0x6f,
	0x79, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x2f, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x65, 0x77, 0x6d, 0x61, 0x2f, 0x76,
	0x33, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_contrib_envoy_extensions_load_balancing_policies_peak_ewma_v3alpha_peak_ewma_proto_rawDescOnce sync.Once
	file_contrib_envoy_extensions_load_balancing_policies_peak_ewma_v3alpha_peak_ewma_proto_rawDescData = file_contrib_envoy_extensions_load_balancing_policies_peak_ewma_v3alpha_peak_ewma_proto_rawDesc
)

func file_contrib_envoy_extensions_load_balancing_policies_peak_ewma_v3alpha_peak_ewma_proto_rawDescGZIP() []byte {
	file_contrib_envoy_extensions_load_balancing_policies_peak_ewma_v3alpha_peak_ewma_proto_rawDescOnce.Do(func() {
		file_contrib_envoy_extensions_load_balancing_policies_peak_ewma_v3alpha_peak_ewma_proto_rawDescData = protoimpl.X.CompressGZIP(file_contrib_envoy_extensions_load_balancing_policies_peak_ewma_v3alpha_peak_ewma_proto_rawDescData)
	})
	return file_contrib_envoy_extensions_load_balancing_policies_peak_ewma_v3alpha_peak_ewma_proto_rawDescData
}

var file_contrib_envoy_extensions_load_balancing_policies_peak_ewma_v3alpha_peak_ewma_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_contrib_envoy_extensions_load_balancing_policies_peak_ewma_v3alpha_peak_ewma_proto_goTypes = []interface{}{
	(*PeakEwma)(nil),               // 0: envoy.extensions.load_balancing_policies.peak_ewma.v3alpha.PeakEwma
	(*durationpb.Duration)(nil),    // 1: google.protobuf.Duration
	(*wrapperspb.UInt32Value)(nil), // 2: google.protobuf.UInt32Value
	(*wrapperspb.DoubleValue)(nil), // 3: google.protobuf.DoubleValue
}
var file_contrib_envoy_extensions_load_balancing_policies_peak_ewma_v3alpha_peak_ewma_proto_depIdxs = []int32{
	1, // 0: envoy.extensions.load_balancing_policies.peak_ewma.v3alpha.PeakEwma.decay_time:type_name -> google.protobuf.Duration
	1, // 1: envoy.extensions.load_balancing_policies.peak_ewma.v3alpha.PeakEwma.aggregation_interval:type_name -> google.protobuf.Duration
	2, // 2: envoy.extensions.load_balancing_policies.peak_ewma.v3alpha.PeakEwma.max_samples_per_host:type_name -> google.protobuf.UInt32Value
	1, // 3: envoy.extensions.load_balancing_policies.peak_ewma.v3alpha.PeakEwma.default_rtt:type_name -> google.protobuf.Duration
	3, // 4: envoy.extensions.load_balancing_policies.peak_ewma.v3alpha.PeakEwma.penalty_value:type_name -> google.protobuf.DoubleValue
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() {
	file_contrib_envoy_extensions_load_balancing_policies_peak_ewma_v3alpha_peak_ewma_proto_init()
}
func file_contrib_envoy_extensions_load_balancing_policies_peak_ewma_v3alpha_peak_ewma_proto_init() {
	if File_contrib_envoy_extensions_load_balancing_policies_peak_ewma_v3alpha_peak_ewma_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_contrib_envoy_extensions_load_balancing_policies_peak_ewma_v3alpha_peak_ewma_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeakEwma); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_contrib_envoy_extensions_load_balancing_policies_peak_ewma_v3alpha_peak_ewma_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_contrib_envoy_extensions_load_balancing_policies_peak_ewma_v3alpha_peak_ewma_proto_goTypes,
		DependencyIndexes: file_contrib_envoy_extensions_load_balancing_policies_peak_ewma_v3alpha_peak_ewma_proto_depIdxs,
		MessageInfos:      file_contrib_envoy_extensions_load_balancing_policies_peak_ewma_v3alpha_peak_ewma_proto_msgTypes,
	}.Build()
	File_contrib_envoy_extensions_load_balancing_policies_peak_ewma_v3alpha_peak_ewma_proto = out.File
	file_contrib_envoy_extensions_load_balancing_policies_peak_ewma_v3alpha_peak_ewma_proto_rawDesc = nil
	file_contrib_envoy_extensions_load_balancing_policies_peak_ewma_v3alpha_peak_ewma_proto_goTypes = nil
	file_contrib_envoy_extensions_load_balancing_policies_peak_ewma_v3alpha_peak_ewma_proto_depIdxs = nil
}
